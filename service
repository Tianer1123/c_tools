#!/bin/bash
#myapp              service of myapp
#
#description: Start stop restart status
#
#操作流程：
#1.chmod +x /path/my/service
#2.mv service /etc/init.d/myapp_service       #把该文件移到init.d目录下,要具有可执行权限.
#3.ls -sf /etc/init.d/myapp_service /etc/rc3.d/S100myapp_service

#myapp的绝对路径
PROC_MYAPP=/path/myapp

#watchdog绝对路径.通过watchdog来启动程序.
PROC_WATCHDOG=/path/watchdog

#一个提示字符串
usage_str="See Usgage"

#命令执行后的返回值
RETVAL=0

#获取进程个数的函数,函数只能return返回数字，如果返回字符串用echo.
#需要一个参数
function GetProcNum() {
  if [ x"$1" = x ];then
    return 99
  fi
  ProcNum=`ps -ef | grep -w $1 | grep -v grep | wc -l`
  RETVAL=$?
  if [ $RETVAL -eq 0 ];then #命令执行成功
    echo $ProcNum           #以字符串形式返回ProcNum
  else
    return 99
  fi
}

#获取进程ID的函数,函数只能return返回数字，如果返回字符串用echo.
#需要一个参数
function GetPid() {
  if [ x"$1" = x ];then
    return 99
  fi
  Pids=`ps -ef | grep $1 | grep -v grep | grep -v PPID | awk '{ print $2}'`
  RETVAL=$?
  if [ $RETVAL -eq 0 ];then #命令执行成功
    echo $Pids              #以字符串形式返回Pids
  else
    return 99
  fi
}

#status功能：检查每一个进程的运行是否正常,并打印提示信息.
if [ "$1" = "status" ] ; then
  echo ""
  ProcNumber_myapp=`GetProcNum "$PROC_MYAPP"`
  if [ $ProcNumber_myapp -eq 0 ];then
    echo "myapp service not start...$usage_str!"
  else
    echo "myapp service started!"
  fi
  echo ""
fi

start() {
  echo ""
  
  #执行GetProcNum函数,传递参数$PROC_WATCHDOG.并将返回值赋值给ProcNum_watchdog.
  #只要watchdog起着,其他进程都起着.如果watchdog起着，提示服务已经起来了.
  ProcNum_watchdog=`GetProcNum "$PROC_WATCHDOG"`
  RETVAL=$?
  if [ $RETVAL -ne 0 ];then
    return $RETVAL
  fi
  if [ $ProcNum_watchdog -ne 0 ];then  #watchdog进程在运行.
    echo "service myapp already started!"
    echo ""
    return $RETVAL
  fi
  
  #运行所有进程
  echo "Starting service myapp..."
  $PROC_WATCHDOG 2>/dev/null >/dev/null & #后台运行,不在终端上显示打印信息.
  echo "service myapp start ok!"
  echo ""
  
  RETVAL=0
  return $RETVAL
}
